
name: 'Deploy Infra'

on:
  # push:
    # branches: [ "main" ]
  #pull_request:
   # branches: [ "main" ]
    
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: 'Infra automation'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:    
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    - name: Configure AWS Credentials 
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: ap-south-1
        
    # Move to Application directory and deploy application
    - name: Deploy Application
      run: |
        cd application
        terraform init
        terraform plan -out=plan.out
        terraform apply -auto-approve plan.out
        echo pub_ip=$(terraform-bin output -raw ec2_public_ip) >> $GITHUB_ENV
        
    - name: Upload application tfstate file
      uses: actions/upload-artifact@v3
      with:
        name: tfstate1
        path: application/terraform.tfstate

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Deploy load balancer
      run: |
        terraform init
        terraform plan -out=plan.out -var originip=${pub_ip}
        terraform apply -auto-approve plan.out 
        
    - name: Upload F5 XC resources tfstate file
      uses: actions/upload-artifact@v3
      with:
        name: tfstate2
        path: terraform.tfstate
